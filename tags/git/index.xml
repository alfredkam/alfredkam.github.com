<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Git on Alfred kam </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://alfredkam.com/tags/git/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Mon, 17 Feb 2014 00:00:00 UTC</updated>
    
    <item>
      <title>using git hooks to deploy server with forever</title>
      <link>http://alfredkam.com/using-git-hooks-to-deploy-server-with-forever</link>
      <pubDate>Mon, 17 Feb 2014 00:00:00 UTC</pubDate>
      
      <guid>http://alfredkam.com/using-git-hooks-to-deploy-server-with-forever</guid>
      <description>&lt;p&gt;If you love deploying with automation and you love the fact you dont need to touch your server (which you should!).  I&#39;ve setup this up on an ec2 ubuntu 12.04 LTS, shouldnt differ too much with other ubuntu versions.  At this time of writing i&#39;m setting up a nodejs / flask server&lt;/p&gt;
&lt;p&gt;On your remote server&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
#install forever and give it global access
sudo npm install -g forever
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
#setup git bare at your deployment server
git clone --bare [repo url]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
#add the hooks
#navigate into your git folder
cd path/to/repo/hooks
vi pre-receive
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;
#!/bin/sh
echo &#34;stopping server service&#34;
service nodejs-www stop
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;
vi post-receive
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;
#!/bin/sh
echo &#34;checkout the files&#34;

branch=$(git branch | grep &#34;*&#34; | sed &#34;s/* //&#34;)

if [ &#34;$branch&#34; = &#34;master&#34; ]
then
        echo &#34;Master branch&#34;
        git --work-tree=/home/ubuntu/app/www checkout -f
        echo &#34;Successfully checked out master branch&#34;
else
        echo &#34;Not master branch&#34;
fi

echo &#34;start service&#34;
service nodejs-www start
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
sudo chmod +x pre-receive;
sudo chmod +x post-receive;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;FYI: Just make sure the folders are created for the &#34;git --work-tree&#34;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
#navigate into init.d to create a service
cd /etc/init.d
sudo vi nodejs-www
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;
#! /bin/sh
# /etc/init.d/nodejs-www
#

NAME=nodejs-www
APP=index.js
APP_DIR=/home/ubuntu/app/www
forever=/usr/local/bin/forever
export PATH=$PATH:/usr/local/bin/
LOG=/var/log/nodejs-www.log

case &#34;$1&#34; in
  start)
    cd $APP_DIR
    echo &#34;Starting $NAME&#34;
    #I detached the message to &#39;screen&#39;, it is not a requirement
    screen -d -m /usr/bin/sudo -u ubuntu $forever --minUptime 5000 --spinSleepTime 2000 -a -l $LOG start $APP
    #if to run a python server use
    #screen -d -m /usr/bin/sudo -u ubuntu $forever --minUptime 5000 --spinSleepTime 2000 -a -l $LOG start -c python $APP
    echo &#34;Started $Name&#34;
    exit 0
    ;;
  stop)
    echo &#34;Stopping script $NAME&#34;
    cd $APP_DIR
    /usr/bin/sudo -u ubuntu $forever stop $APP
    exit 0
    ;;
  list)
    echo &#34;List&#34;
    /usr/bin/sudo -u ubuntu $forever list
    exit 0
    ;;
  *)
    echo &#34;Usage: /etc/init.d/nodejs-www {start|stop|list}&#34;
    exit 1
    ;;
esac

exit 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;FYI: Many others were able to run forever directly without having &#34;/usr/bin/sudo -u ubuntu&#34; (ubuntu is the user account) or substituting it with &#34;sudo&#34;.  For my case on an amazon aws, without it, i ran into permission issues with forever and nodejs directory mapping issues.&lt;/p&gt;
&lt;p&gt;A permission error similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-javascript&#39;&gt;
fs.js:0
(function (exports, require, module, __filename, __dirname) { // Copyright Joy
^
Error: EACCES, permission denied &#39;/root/.forever/pids/FepR.pid&#39;
    at Object.fs.openSync (fs.js:410:18)
    at Object.fs.writeFileSync (fs.js:956:15)
    at writePid (/usr/local/lib/node_modules/forever/bin/monitor:13:6)
    at null.&lt;anonymous&gt; (/usr/local/lib/node_modules/forever/bin/monitor:46:5)
    at EventEmitter.emit (/usr/local/lib/node_modules/forever/node_modules/forever-monitor/node_modules/broadway/node_modules/eventemitter2/lib/eventemitter2.js:332:22)
    at /usr/local/lib/node_modules/forever/node_modules/forever-monitor/lib/forever-monitor/monitor.js:153:10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now to wrap up the server side&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
sudo chmod a+x nodejs-www
cd /var/log
sudo touch nodejs-www.log
sudo chmod 777 nodejs-www.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add to rc.local to start upon server start&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
sudo vi /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
#!/bin/sh -e
service nodejs-www start
exit 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For some you may need to change the rc.local permission to executable.&lt;/p&gt;
&lt;p&gt;If i didnt miss anything this should it for the server&lt;/p&gt;
&lt;p&gt;Now on client side&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
cd path/to/repo
git remote add deploy [remote server repo url]
git commit -am &#39;test deploy&#39;
git push deploy master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This should be it, and the service should automatically stop and restart itself.  If i missed anything let me know :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git Cheat Sheet</title>
      <link>http://alfredkam.com/git-cheat-sheet</link>
      <pubDate>Mon, 17 Dec 2012 00:00:00 UTC</pubDate>
      
      <guid>http://alfredkam.com/git-cheat-sheet</guid>
      <description>&lt;p&gt;&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
#Setting up git from scratch
git init                                             #initialize git
git remote add &amp;lt; remote_label &amp;gt; &amp;lt; destination &amp;gt;      #adds a new remote destination with a label
git fetch &amp;lt; remote_label &amp;gt;                           #fetches the head of the repo
git checkout master                                  #checkouts the master branch&lt;/p&gt;

&lt;p&gt;#Setting up git from another repo
git clone &amp;lt; remote_label &amp;gt;  &amp;lt; optional_dir_location &amp;gt;  #clone a repo with git config ready&lt;/p&gt;

&lt;p&gt;#Branching
git branch                                     #list all branches
git branch &amp;lt; branch_label &amp;gt;                    #creates a new local branch with name &amp;lt; branch_label &amp;gt;
git branch -d &amp;lt; branch_label &amp;gt;                 #deletes the local branch with name &amp;lt; branch_label &amp;gt;
git push &amp;lt; remote_label&amp;gt; :&amp;lt; branch_label &amp;gt;     #deletes remote branch&lt;/p&gt;

&lt;p&gt;#Merging
git checkout &amp;lt; branch to be merge &amp;gt;&lt;br /&gt;
git merge &amp;lt; branch_name &amp;gt;                      #merge recursively and auto commit&lt;/p&gt;

&lt;p&gt;additional info - &lt;a href=&#34;http://www.kernel.org/pub/software/scm/git/docs/git-merge.html&#34; title=&#34;git merge&#34;&gt;git merge man page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;#fetch &amp;amp; pulling
git pull &amp;lt; remote_label &amp;gt; &amp;lt; branch_label&amp;gt;      #it will recursively merge with your repo
git fetch &amp;lt; remote_label &amp;gt;&lt;/p&gt;

&lt;p&gt;#Commit
git commit -a -m &amp;lt; message &amp;gt;                   #local commit
git commit -amend -m &amp;lt; message &amp;gt;               #edit last commit message
git push &amp;lt; remote_label &amp;gt; &amp;lt; branch_label &amp;gt;     #commits to remote branch&lt;/p&gt;

&lt;p&gt;#Tagging
git tag -a &amp;lt; comment &amp;gt;                         #to remember a specific point
git push &amp;ndash;tag                                 #pushes tag&lt;/p&gt;

&lt;p&gt;#To delete a tag
git tag -d &amp;lt; tag_name &amp;gt;
git push origin :&amp;lt; tag_name &amp;gt;&lt;/p&gt;

&lt;p&gt;#if tag name is same as one of your branch name
git tag -d &amp;lt; tag_name &amp;gt;
git push origin :refs/tag/&amp;lt; tag_name &amp;gt;&lt;/p&gt;

&lt;p&gt;#Logging
git log                                        #shows the commit log&lt;/p&gt;

&lt;p&gt;#Untrack a file
git rm &amp;ndash;cache &amp;lt; file_name &amp;gt;                   #untracks a file, thus not included in repo&lt;/p&gt;

&lt;p&gt;#Stashing
git stash&lt;/p&gt;

&lt;p&gt;#cloning a bare repo for deployment purpose
git clone &amp;ndash;bare
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;additional info &lt;a href=&#39;http://www.kernel.org/pub/software/scm/git/docs/git-stash.html&#39; title=&#39;git stash man page&#39;&gt;git stash man page&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
#reverting to previous commits  [Advance]
git checkout &amp;lt; commit_hash &amp;gt;                     #checkout the indicated commit hash
git checkout -b &amp;lt; branch_label &amp;gt; &amp;lt; commit_hash&amp;gt;  #branches with &amp;lt; branch_label &amp;gt; and checkout to the commit hash
git reset &amp;ndash;hard &amp;lt; commit_hash &amp;gt;                 #destroys the local modification, you will loose the uncommit work
git revert &amp;lt; commit_hash &amp;gt;                       #reverts to the previous commit&lt;/p&gt;

&lt;p&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;additional info - &lt;a href=&#34;http://schacon.github.com/git/git-revert.html&#34; title=&#34;git revert man page&#34;&gt;git revert man page&lt;/a&gt; &amp;amp; &lt;a href=&#34;http://stackoverflow.com/questions/4114095/git-revert-to-previous-commit-how&#34; title=&#34;stack over flow git revert qa&#34;&gt;stack over flow git revert qa&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
#splitting a subpath out into a new repo
git filter-branch &amp;ndash;prune-empty &amp;ndash;subdirectory-filter lib master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;additional info - &lt;a href=&#34;https://help.github.com/articles/splitting-a-subpath-out-into-a-new-repo&#34;&gt;github:help&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>