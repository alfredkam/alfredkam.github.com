<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs on Alfred kam</title>
    <link>http://localhost:1313/tags/nodejs/</link>
    <description>Recent content in Nodejs on Alfred kam</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Feb 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>nginx / nodejs stack setup</title>
      <link>http://localhost:1313/nginx-nodejs-stack-setup</link>
      <pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/nginx-nodejs-stack-setup</guid>
      <description>&lt;p&gt;So when you have an nginx + nodejs combo, you want to use &lt;i&gt;nginx to port foward to nodejs&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;my nodejs uses forever to run on port 3000.&lt;/p&gt;
&lt;p&gt;here is the nginx config setup&lt;/p&gt;
&lt;pre class=&#34;language-bash&#34;&gt;
&lt;code&gt;
sudo vi /etc/nginx/site-enabled/default
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&#34;language-bash&#34;&gt;
&lt;code&gt;
#add this line before server { ... }
[...]
upstream app_nodejs {
        server localhost:3000;
}
[...]

#now in server {...}, assuming you want to map your url root to point to nodejs
location / {
               proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
               proxy_set_header Host $http_host;
               proxy_set_header X-NginX-Proxy true;

               proxy_pass http://app_nodejs;
               proxy_redirect off;
           }

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Cheers&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>using git hooks to deploy server with forever</title>
      <link>http://localhost:1313/using-git-hooks-to-deploy-server-with-forever</link>
      <pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/using-git-hooks-to-deploy-server-with-forever</guid>
      <description>&lt;p&gt;If you love deploying with automation and you love the fact you dont need to touch your server (which you should!).  I&#39;ve setup this up on an ec2 ubuntu 12.04 LTS, shouldnt differ too much with other ubuntu versions.  At this time of writing i&#39;m setting up a nodejs / flask server&lt;/p&gt;
&lt;p&gt;On your remote server&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
#install forever and give it global access
sudo npm install -g forever
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#39;language-markup&#39;&gt;&lt;code&gt;
#setup git bare at your deployment server
git clone --bare [repo url]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#39;language-markup&#39;&gt;&lt;code&gt;
#add the hooks
#navigate into your git folder
cd path/to/repo/hooks
vi pre-receive
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#39;language-bash&#39;&gt;&lt;code&gt;
#!/bin/sh
echo &#34;stopping server service&#34;
service nodejs-www stop
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#39;language-bash&#39;&gt;&lt;code&gt;
vi post-receive
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#39;language-bash&#39;&gt;&lt;code&gt;
#!/bin/sh
echo &#34;checkout the files&#34;

branch=$(git branch | grep &#34;*&#34; | sed &#34;s/* //&#34;)

if [ &#34;$branch&#34; = &#34;master&#34; ]
then
        echo &#34;Master branch&#34;
        git --work-tree=/home/ubuntu/app/www checkout -f
        echo &#34;Successfully checked out master branch&#34;
else
        echo &#34;Not master branch&#34;
fi

echo &#34;start service&#34;
service nodejs-www start
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#39;language-markup&#39;&gt;&lt;code&gt;
sudo chmod +x pre-receive;
sudo chmod +x post-receive;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;FYI: Just make sure the folders are created for the &#34;git --work-tree&#34;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
#navigate into init.d to create a service
cd /etc/init.d
sudo vi nodejs-www
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#39;language-bash&#39;&gt;&lt;code&gt;
#! /bin/sh
# /etc/init.d/nodejs-www
#

NAME=nodejs-www
APP=index.js
APP_DIR=/home/ubuntu/app/www
forever=/usr/local/bin/forever
export PATH=$PATH:/usr/local/bin/
LOG=/var/log/nodejs-www.log

case &#34;$1&#34; in
  start)
    cd $APP_DIR
    echo &#34;Starting $NAME&#34;
    #I detached the message to &#39;screen&#39;, it is not a requirement
    screen -d -m /usr/bin/sudo -u ubuntu $forever --minUptime 5000 --spinSleepTime 2000 -a -l $LOG start $APP
    #if to run a python server use
    #screen -d -m /usr/bin/sudo -u ubuntu $forever --minUptime 5000 --spinSleepTime 2000 -a -l $LOG start -c python $APP
    echo &#34;Started $Name&#34;
    exit 0
    ;;
  stop)
    echo &#34;Stopping script $NAME&#34;
    cd $APP_DIR
    /usr/bin/sudo -u ubuntu $forever stop $APP
    exit 0
    ;;
  list)
    echo &#34;List&#34;
    /usr/bin/sudo -u ubuntu $forever list
    exit 0
    ;;
  *)
    echo &#34;Usage: /etc/init.d/nodejs-www {start|stop|list}&#34;
    exit 1
    ;;
esac

exit 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;FYI: Many others were able to run forever directly without having &#34;/usr/bin/sudo -u ubuntu&#34; (ubuntu is the user account) or substituting it with &#34;sudo&#34;.  For my case on an amazon aws, without it, i ran into permission issues with forever and nodejs directory mapping issues.&lt;/p&gt;
&lt;p&gt;A permission error similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-javascript&#39;&gt;
fs.js:0
(function (exports, require, module, __filename, __dirname) { // Copyright Joy
^
Error: EACCES, permission denied &#39;/root/.forever/pids/FepR.pid&#39;
    at Object.fs.openSync (fs.js:410:18)
    at Object.fs.writeFileSync (fs.js:956:15)
    at writePid (/usr/local/lib/node_modules/forever/bin/monitor:13:6)
    at null.&lt;anonymous&gt; (/usr/local/lib/node_modules/forever/bin/monitor:46:5)
    at EventEmitter.emit (/usr/local/lib/node_modules/forever/node_modules/forever-monitor/node_modules/broadway/node_modules/eventemitter2/lib/eventemitter2.js:332:22)
    at /usr/local/lib/node_modules/forever/node_modules/forever-monitor/lib/forever-monitor/monitor.js:153:10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now to wrap up the server side&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
sudo chmod a+x nodejs-www
cd /var/log
sudo touch nodejs-www.log
sudo chmod 777 nodejs-www.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add to rc.local to start upon server start&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
sudo vi /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
#!/bin/sh -e
service nodejs-www start
exit 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For some you may need to change the rc.local permission to executable.&lt;/p&gt;
&lt;p&gt;If i didnt miss anything this should it for the server&lt;/p&gt;
&lt;p&gt;Now on client side&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-markup&#39;&gt;
cd path/to/repo
git remote add deploy [remote server repo url]
git commit -am &#39;test deploy&#39;
git push deploy master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This should be it, and the service should automatically stop and restart itself.  If i missed anything let me know :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>