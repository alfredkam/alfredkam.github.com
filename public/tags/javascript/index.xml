<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Javascript on Alfred kam </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/tags/javascript/index.xml</link>
    <language>en-us</language>
    
    
    <updated>Sun, 08 Jun 2014 00:00:00 UTC</updated>
    
    <item>
      <title>The recent MVC landscape with Angular&#43;React and Backbone&#43;React</title>
      <link>http://localhost:1313/post/2014-06-08-The-recent-mvc-landscape-with-Angular-React-and-Backbone-React</link>
      <pubDate>Sun, 08 Jun 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/post/2014-06-08-The-recent-mvc-landscape-with-Angular-React-and-Backbone-React</guid>
      <description>&lt;p&gt;
    This post might bring in some arguments for both parties that favour one of the framework then the other, but this will be a worth while comparision to take a look at the recent MVC landscape.  Just to clarify - I&#39;m still relatively new to Angular.
&lt;/p&gt;
&lt;p&gt;
    Lets be clear - React is a component that is designed and focused to replace the &#39;V&#39; component under a MVC framework.  The most recognise MVC frameworks are Backbone &amp; Angular, and it&#39;s starting to increasingly standout that React is able to replace the &#39;V&#39; component due to its virtual dom design, minimal exposure of real dom elements and data-binding handling.  It is also &lt;a href=&#39;http://williambrownstreet.net/blog/2014/04/faster-angularjs-rendering-angularjs-and-reactjs/&#39;&gt;proven from this post&lt;/a&gt; that Angular + React provides the fastest rendering.
&lt;/p&gt;
&lt;p&gt;
    To achieve fast render and low inital load speed, the design of the component hierarchy structure is relatively important.  In Angular, React needs to be initiated at the controller. For Backbone, on the other hand needs to be initiated at the router.
&lt;/p&gt;
&lt;p&gt;
    Link to &lt;a href=&#39;http://plnkr.co/edit/7DKHQ6tR7TCKkR5bFURu?p=preview&#39;&gt;Angular+React Demo&lt;/a&gt;&lt;br&gt;
    Link to &lt;a href=&#39;http://plnkr.co/edit/1mwjMNh0RQP8PVrinOmD?p=preview&#39;&gt;Backbone+React Demo&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class=&#39;row&#39;&gt;
    &lt;div class=&#39;col-md-12&#39;&gt;
        &lt;pre class=&#39;col-md-6&#39;&gt;
            &lt;code class=&#39;language-javascript&#39;&gt;
                //Angular Example
                angular.module(&#39;fasterAngular&#39;, []).
                controller(&#39;mycontroller&#39;, [&#39;$scope&#39;, function($scope){
                   $scope.framework = &#39;ReactJs&#39;;
                   $scope.data = [];
                   // Fill the data map with random data
                   $scope.refresh = function(){
                       for(var i = 0; i &lt; 1500; ++i) {
                           $scope.data[i] = {};
                           for(var j = 0; j &lt; 5; ++j) {
                               $scope.data[i][j] = Math.random();
                           }
                       }
                   }
                   
                   $scope.refresh();
                   
                   $scope.$watchCollection(&#39;data&#39;, function(newValue, oldValue){
                       React.renderComponent(
                           MYLIST({data:newValue}),
                           document.getElementById(&#34;fastRepeatArea&#34;)
                       );
                   })
                }])
            &lt;/code&gt;
        &lt;/pre&gt;

        &lt;pre class=&#39;col-md-6&#39;&gt;
            &lt;code class=&#39;language-javascript&#39;&gt;
                //Backbone example
                $(document).ready(function () {
                  new (Backbone.Router.extend({
                    initialize : function () {
                        var data = [];
                        var refresh = function () {
                          for(var i = 0; i &lt; 1500; ++i) {
                                  data[i] = {};
                                  for(var j = 0; j &lt; 5; ++j) {
                                      data[i][j] = Math.random();
                                  }
                              }
                          React.renderComponent(
                            MYLIST({data:data}),
                            document.getElementById(&#34;fastRepeatArea&#34;)
                          );
                        };
                        refresh();
                        $(&#39;button#refreshBtn&#39;).click(function () {
                          refresh();
                        });
                    },
                  }))();
                });
            &lt;/code&gt;
        &lt;/pre&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
     React is initiated under the same flow and it would achieve the same render speed.  This example can be further improved by delegating the data change event and click event to React or using mixins to listen to partial changes. Instead of having it through the Angular controller or Backbone router.
&lt;/p&gt;
&lt;p&gt;
    At this point, Angular+React and Backbone+React would be equivalent. Now lets take a look at the required components and initial loading speed.
&lt;/p&gt;
&lt;p&gt;
    According to &lt;a href=&#39;http://lhorie.github.io/mithril/&#39;&gt;Mithril&lt;/a&gt;, Angular takes 7.49ms to load and Backbone takes 18.54ms to load.  Another important to note is Backbone is light weight but it still depends upon underscore &amp; jquery.  Those add up during initial script request!
&lt;/p&gt;
&lt;p&gt;
    I believe this pretty much dictates which combination is the go to framework for heavy web apps.  Every second counts to keep your user on your site!
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Goodbye Marionette &amp; Hello React</title>
      <link>http://localhost:1313/post/2014-05-28-goodbye-marionette-hello-react</link>
      <pubDate>Wed, 28 May 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/post/2014-05-28-goodbye-marionette-hello-react</guid>
      <description>&lt;p&gt;
     I have been developing a lot of large javascript web apps that requires a lot of subview management or componets and decentralize the model dependecies to better suit the component re-usability.  It was not till early this year, I was still designing them with Backbone + Marionette.  Now it&#39;s &lt;b&gt;Backbone + React or Angular + React&lt;/b&gt;.  For this post let&#39;s concentrate in comparing Backbone + Mariontte &amp; Backbone + React.   

     As we all know, Backbone &#39;View&#39; itself is a design flaw.  It had a lot of issues regarding its memory management and sub view management.  Marionette on the other hand, did help solved the sub view management and memory issues by offering a wide range of common designs and design patterns to help build the application.
&lt;/p&gt;

&lt;p&gt;
    Although Marionette provided a decent way to handle layout, subviews and code management, it is still too dependent on Backbone and gets more complex upon further sub view nesting. In Marionette the view is represented as a tree, the subviews is also part of the tree, thus if to render the middle layer must destruct and a rebuilt must occur. As well as rendering multiple Marionette Layers and Regions, although these Marionette functionalites are really awesome which helped took out the pain in backbone. While nesting those components doesnt play nicely with each other and hard to decouple, causing the sub layouts and sub regions to have an event show fire before its parent fires the show event.
&lt;/p&gt;
&lt;p&gt;
    Consider in Marionette, you used a layout to display a widget on a page.  Within the widget there is also a layout before it calls the itemview.  In other words nested layout then itemview.
&lt;/p&gt;
&lt;div class=&#39;row&#39;&gt;
  &lt;div class=&#39;col-md-12&#39;&gt;
    &lt;img style=&#39;width:100%&#39; src=&#39;/assets/img/layout-example-marionette+react.svg&#39;&gt;&lt;/img&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre class=&#39;language-javascript&#39;&gt;
    &lt;code class=&#39;language-markup&#39;&gt;
      &lt;!-- html structure --&gt;
      &amp;#60;html&amp;#62;
        &amp;#60;body&amp;#62;
          &lt;div id=&#39;menu&#39;&gt;
          &lt;/div&gt;
          &lt;div id=&#39;widget&#39;&gt;
          &lt;/div&gt;
          &lt;script id=&#34;some-template&#34; type=&#34;text/html&#34;&gt;
            &lt;ul&gt;
              &lt;% _.each(items, function(item){ %&gt;
              &lt;li&gt; &lt;%= item.someAttribute %&gt; &lt;/li&gt;
              &lt;% }); %&gt;
            &lt;/ul&gt;
          &lt;/p&gt;

          &lt;script id=&#34;some-comment-template&#34; type=&#34;text/html&#34;&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;%= item.someAttribute %&gt; &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/p&gt;

          &lt;script id=&#34;widget-layout-template&#34; type=&#34;text/html&#34;&gt;
            &lt;div id=&#39;stats-region&#39;&gt;
            &lt;/div&gt;
            &lt;div id=&#39;comment-region&#39;&gt;
            &lt;/div&gt;
          &lt;/p&gt;
        &amp;#60;/body&amp;#62;
      &amp;#60;/html&amp;#62;
    &lt;/code&gt;
    &lt;code class=&#39;language-javascript&#39;&gt;
      //javascript code
      &#39;use strict&#39;;

      define([
        &#39;backbone&#39;, &#39;marionette&#39;
      ], function(
        Backbone, Marionette
      ) {
        var AppLayout = Backbone.Marionette.Layout.extend({
          template : &#39;#some-layout-template&#39;
          regions : {
            widget : &#39;#widget&#39;,
            menu : &#39;#menu&#39;  
          }
        });

        var MenuItem = Backbone.Marionette.IteView.extend({
          template : &#39;#some-template&#39;
        });

        var CommentItem = Backbone.Marionette.ItemView.extend({
          template : &#39;#some-comment-template&#39;
        });

        var StatsItem = Backbone.Marionette.ItemView.extend({
          template : &#39;#some-template&#39;
        });

        var CommentsCompositeView = Backbone.CompositeView.extend({
          template : &#39;#some-comment-template&#39;,
          itemView : CommentItem
        });

        var WidgetLayout = Backbone.Marionette.Layout.extend({
          initialize : function () {
            this.collection = new Backbone.Collection();
          },
          template : &#39;#widget-layout-template&#39;,
          regions : {
            stats : new Marionette.Region({
              el : &#34;#stats-region&#34;
            })
            comments : new Marionette.Region({
              el : &#39;#comment-region&#39;
            })
          },
          onShow : function () {
            this.regions.stats.show(new StatsItem(
              model : someModel
            ));
            this.regions.comments.show(new CommentsCompositeView({
              collection : this.collection
            }));
          }
        });

        var layout = new AppLayout();
        layout.render();
        layout.widget.show(new WidgetLayout());
        layout.menu.show(new MenuItem());
      });
    &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;
  In this example we will run into a render issue with the sub region fire before the parent does.
&lt;/p&gt;
&lt;p&gt;
  Now came 2014 and there is a new contender in the market called Facebook React, I&#39;ll just call it React for short.  React is a &#39;View&#39; Framework.  So in terms of a MVC, its the &#39;V&#39; Component.  Suprisingly React further simplified the entire landscape of &#39;View&#39; framework.  It only expose the real nodes that you have
&lt;/p&gt;
&lt;p&gt;
  Lets see how this will look like in React, ive also included the propeller &lt;a href=&#39;https://github.com/usepropeller/react.backbone&#39;&gt;react.backbone&lt;/a&gt;.  It allows us to feed in backbone models into react and databind with mixin.
&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;
  &lt;code class=&#39;language-markup&#39;&gt;
      &amp;lt;!&amp;ndash; html structure &amp;ndash;&amp;gt;
      &amp;#60;html&amp;#62;
        &amp;#60;body&amp;#62;
        &amp;#60;/body&amp;#62;
      &amp;#60;/html&amp;#62;
  &lt;/code&gt;
  &lt;code class=&#39;language-javascript&#39;&gt;
    //javascript code
    /** @jsx React.DOM **/
    &amp;lsquo;use strict&amp;rsquo;;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;define ([
  &#39;jquery&#39;, backbone&#39;, &#39;react&#39;, &#39;react.backbone&#39;
], function (
  $, Backbone, React,
) {

  var CommentComponent = React.createBackboneClass({
    var comments = this.props.collection.map(function(item) {
      return (
        {item.get(&#39;comment&#39;)}
      )
    });
    return (
      &amp;lt;div&amp;gt;
        {comments}
      &amp;lt;/div&amp;gt;
    );
  });

  var StatsComponent = React.createBackboneClass({
    render : function () {
      return (
        &amp;lt;div&amp;gt; 
          {/* html template */}
        &amp;lt;/div&amp;gt;
      );
    }
  });

  var MenuComponent = React.createBackboneClass({
    render : function () {
      return (
        &amp;lt;div&amp;gt; 
          {/* html template */}
        &amp;lt;/div&amp;gt;
      );
    }
  });

  var WidgetLayout = React.createBackboneClass({
    componentWillMount : function () {
      this.collection = Backbone.Collection();
    },
    render : function () {
      return (
        &amp;lt;StatsComponent /&amp;gt;
        &amp;lt;CommentsComponent collection={this.collection}/&amp;gt;
      )
    };
  });

  var AppLayout = React.createBackboneClass({
    render : function () {
      return (
        &amp;lt;div&amp;gt;
            &amp;lt;MenuComponent /&amp;gt;
            &amp;lt;WidgetLayout /&amp;gt;
        &amp;lt;/div&amp;gt;
      );
    };
  });
  React.renderComponent({
    &amp;lt;AppLayout /&amp;gt;,
    $(&#39;body&#39;)[0]
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;
  The code base is smaller, easier to understand and to control.  Now some may ask about Angular + React comparing with Backbone + React.  For this I&amp;rsquo;ll leave it to next post, but this is now pretty clear Marionette is out of the game.
&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript Function Crib Sheet</title>
      <link>http://localhost:1313/post/2013-05-08-js-function-crib-sheet</link>
      <pubDate>Wed, 08 May 2013 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/post/2013-05-08-js-function-crib-sheet</guid>
      <description>&lt;p&gt;Getting Lazy! So created a javascript function cheat sheet to share with the travellers here.  Hope it will be help many of you.&lt;/p&gt;
&lt;p&gt;The cryptsheet includes these functions and can be found here : &lt;a href=&#39;https://github.com/alfredkam/jsFunctions&#39;&gt;https://github.com/alfredkam/jsFunctions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;General Laziness::&lt;br /&gt;
- jquery toggle string&lt;br /&gt;
- jquery enter keyup event&lt;/p&gt;
&lt;p&gt;Mathematical Functions::&lt;br /&gt;
- n choose r&lt;br /&gt;
- Binomial Distribution&lt;br /&gt;
- Probability Mass Function  (Useful when wanted to create a bell curve)&lt;br /&gt;
- Summation&lt;/p&gt;
&lt;p&gt;If the function your missing is not listed, comment below and i may be able to write one.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Searchable Hash Bang (SEO)</title>
      <link>http://localhost:1313/post/2013-02-01-searchable-hash-bang-seo</link>
      <pubDate>Fri, 01 Feb 2013 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/post/2013-02-01-searchable-hash-bang-seo</guid>
      <description>&lt;p&gt;Having a dynamic website, AJAX is often used and rely on hash bang to act as a http GET to let the site be interactive.  Inorder to have your application searchable / crawable, there are couple of rules to follow as suggested by &lt;a href=&#39;https://developers.google.com/webmasters/ajax-crawling/docs/specification&#39;&gt;the google specs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Assuming your too lazy to checkout the specs. In summary the hash bang should be setup this way:&lt;/p&gt;
&lt;p&gt;In a typical site, you will notice the url with http GET are written in this format&lt;br /&gt;
&lt;code&gt;&lt;br /&gt;
http://yoursite.com?key1=value1&amp;key2=value2&lt;br /&gt;
&lt;/code&gt;&lt;br /&gt;
Now in your hashbang, your will want to transform&lt;br /&gt;
&lt;code&gt;&lt;br /&gt;
http://yoursite.com#value1&amp;value2&lt;br /&gt;
&lt;/code&gt;&lt;br /&gt;
into beautiful url&lt;br /&gt;
&lt;code&gt;&lt;br /&gt;
http://yoursite.com&lt;strong&gt;#!key1=value1&amp;key2=value2&lt;/strong&gt;&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Best way to develop a dynamic website</title>
      <link>http://localhost:1313/post/2012-12-20-best-way-to-develop-a-dynamic-website</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/post/2012-12-20-best-way-to-develop-a-dynamic-website</guid>
      <description>&lt;p&gt;The develop a dynamic website, with all those smooth page transitions similar to gmail.  As per design we will use &lt;a href=&#34;http://twitter.github.com/bootstrap/&#34;&gt;Bootstrap&lt;/a&gt;, Bootstrap provides all the css tools you need to setup a quick website.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Frontend skills you will need&lt;/strong&gt;&lt;br /&gt;
- javascript&lt;br /&gt;
- html&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Frameworks&lt;/strong&gt;&lt;br /&gt;
First of all we will start of with a model view controller + observer design patterns to achieve a maintainable site.&lt;br /&gt;
The web frameworks that we will use are&lt;br /&gt;
- &lt;a href=&#39;http://backbonejs.org&#39;&gt;backbone js&lt;/a&gt;   , giving a &#34;structure&#34; to the code&lt;br /&gt;
- &lt;a href=&#39;http://requirejs.org&#39;&gt;require js&lt;/a&gt;    , setting up javascript dependencies, works like php include&lt;br /&gt;
- &lt;a href=&#39;http://mustache.github.com&#39;&gt;mustache&lt;/a&gt;      , page templates&lt;br /&gt;
- &lt;a href=&#39;http://jquery.com&#39;&gt;jquery&lt;/a&gt;        , dom manipulations&lt;/p&gt;
&lt;p&gt;as font icons we can get them for free at &lt;a href=&#34;http://fontello.com&#34;&gt;fontello&lt;/a&gt;, their package includes font-awesome&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Folder Structure&lt;/strong&gt;&lt;br /&gt;
&lt;pre class=&#39;language-markup&#39;&gt;
  &lt;code&gt;
        index.html
        css/
        templates/      &lt;=== contains the html templates
        js/views/   &lt;=== responsible for inital html materials and listenes to model changes / actions / events
        js/models/  &lt;=== responsible for data models
        js/controller/  &lt;=== defines the site routes
        blueprints/     &lt;=== contains all the 3rd party library
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;To setup hashbang (similar to gmail) for page manipulations, there is a backbone module - backbone router.  Using backbone router we can set up page to change dynamically depending on the hashbang setup. To let your hash bang searchable / crawable, checkout this &lt;a href=&#39;http://www.alfredkam.com/searchable-hash-bang-seo&#39;&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can checkout the &lt;a href=&#39;https://github.com/alfredkam/boilerplates&#39;&gt;Boiler Plate&lt;/a&gt; i&#39;ve setup using this structure for off the shelve deployment.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Further Readings&lt;/strong&gt;&lt;br /&gt;
Backbone Router&lt;br /&gt;
- http://backbonetutorials.com/what-is-a-router/&lt;/p&gt;
&lt;p&gt;Backbone + MVC&lt;br /&gt;
- http://backbonetutorials.com/organizing-backbone-using-modules/&lt;br /&gt;
- http://coenraets.org/blog/2011/12/backbone-js-wine-cellar-tutorial-part-1-getting-started/&lt;br /&gt;
- http://blog.andyet.com/2010/oct/29/building-a-single-page-app-with-backbonejs-undersc/&lt;br /&gt;
- http://backbonetutorials.com/what-is-a-model/&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>